<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>153, 17</value>
  </metadata>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>////////////////////////////////////
//   This macro is designed for   //
// training alchemy from 30. Have //
//  5 empty kegs on you and a lot //
//  of mortars and pestals. This  //
//   macro only makes PVP worthy  //
//   potions to minimize waste.   //
//                                //
//  Turn on loop and click play!  //
//                                //
//      ~~Made by kdivers~~       //
////////////////////////////////////
if skill 'alchemy' &lt; 60 and not @findobject 'TR'
  headmsg 'Select Total Refresh Keg'
  promptalias 'TR'
endif
if skill 'alchemy' &lt; 70 and not @findobject 'GA'
  headmsg 'Select Greater Agility Keg'
  promptalias 'GA'
endif
if skill 'alchemy' &lt; 80 and not @findobject 'GS'
  headmsg 'Select Greater Strength Keg'
  promptalias 'GS'
endif
if skill 'alchemy' &lt; 90 and not @findobject 'GH'
  headmsg 'Select Greater Heal Keg'
  promptalias 'GH'
endif
if skill 'alchemy' &lt; 100 and not @findobject 'GC'
  headmsg 'Select Greater Cure Keg'
  promptalias 'GC'
endif
if skill 'alchemy' &lt; 30
  headmsg 'Buy more skill!'
  stop
elseif skill 'alchemy' &lt; 60
  if usetype 0xe9b 0x0 'backpack'
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 1
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 9
    waitforgump 0x38920abd 2000
  endif
  if @findtype 0xf0b 0x0 'backpack'
    moveitem 'found' 'TR'
    pause 600
  endif
elseif skill 'alchemy' &lt; 70
  if usetype 0xe9b 0x0 'backpack'
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 8
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 9
    waitforgump 0x38920abd 2000
  endif
  if @findtype 0xf08 0x0 'backpack'
    moveitem 'found' 'GA'
    pause 600
  endif
elseif skill 'alchemy' &lt; 80
  if usetype 0xe9b 0x0 'backpack'
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 29
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 9
    waitforgump 0x38920abd 2000
  endif
  if @findtype 0xf09 0x0 'backpack'
    moveitem 'found' 'GS'
    pause 600
  endif
elseif skill 'alchemy' &lt; 90
  if usetype 0xe9b 0x0 'backpack'
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 22
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 16
    waitforgump 0x38920abd 2000
  endif
  if @findtype 0xf0c 0x0 'backpack'
    moveitem 'found' 'GH'
    pause 600
  endif
elseif skill 'alchemy' &lt; 100
  if usetype 0xe9b 0x0 'backpack'
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 43
    waitforgump 0x38920abd 15000
    replygump 0x38920abd 16
    waitforgump 0x38920abd 2000
  endif
  if @findtype 0xf07 0x0 'backpack'
    moveitem 'found' 'GC'
    pause 600
  endif
else
  headmsg 'Alchemy complete!'
  stop
endif</value>
  </data>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>293, 17</value>
  </metadata>
  <metadata name="saveFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>